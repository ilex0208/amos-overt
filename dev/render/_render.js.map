{"version":3,"sources":["../../src/render/_render.js"],"names":["defaultOpt","bgOptions","backgroundColor","backgroundImage","backgourndImageOpacity","tooltipBackgroundColor","tooltipColor","Render","context","canvasW","canvasH","self","_opts","draw","callback","_clearCanvas","_drawGlobal","itemLoaded","bgImg","Image","addEventListener","bgPattern","createPattern","src","e","Error","console","log","clearRect","fillStyle","fillRect","globalAlpha","module","exports"],"mappings":";;AAAA,IAAIA,aAAa;AACfC,aAAW;AACTC,qBAAiB,SADR,EACqC;AAC9CC,qBAAiB,IAFR,EAEoC;AAC7CC,4BAAwB,GAHf,EAGqC;AACA;AAC9CC,4BAAwB,oBALf,EAKqC;AAC9CC,kBAAc,oBANL,CAMqC;AANrC;AADI,CAAjB;;AAWA;;;;;;;;;;;;AAYA,SAASC,MAAT,CAAgBC,OAAhB,EAAyBC,OAAzB,EAAkCC,OAAlC,EAA2CT,SAA3C,EAAsD;AACpD,MAAIU,OAAO,IAAX;AACA,MAAIC,QAAQX,aAAaD,WAAWC,SAApC;AACA,OAAKY,IAAL,GAAY,UAASC,QAAT,EAAmB;AAC7BC,mBAD6B,CACb;AAChBC,gBAAYJ,KAAZ,EAF6B,CAET;AACrB,GAHD;;AAKA;;;AAGA,OAAKK,UAAL,GAAkB,UAAShB,SAAT,EAAoBa,QAApB,EAA8B;AAC9C,QAAIb,UAAUE,eAAd,EAA+B;AAC7B,UAAI;AACF;AACAQ,aAAKO,KAAL,GAAa,IAAIC,KAAJ,EAAb;AACAR,aAAKO,KAAL,CAAWE,gBAAX,CAA4B,MAA5B,EAAoC,YAAW;AAC7C;AACAT,eAAKU,SAAL,GAAiBb,QAAQc,aAAR,CAAsBX,KAAKO,KAA3B,EAAkC,QAAlC,CAAjB;AACAJ;AACD,SAJD,EAIG,KAJH;AAKAH,aAAKO,KAAL,CAAWK,GAAX,GAAiBtB,UAAUE,eAA3B;AACD,OATD,CASE,OAAOqB,CAAP,EAAU;AACVV;AACA,cAAM,IAAIW,KAAJ,CAAU,kCAAV,CAAN;AACD,OAZD,SAYU;AACRC,gBAAQC,GAAR,CAAY,iBAAZ;AACD;AACF,KAhBD,MAgBO;AACLb;AACD;AACF,GApBD;;AAsBA;;;AAGA,WAASC,YAAT,GAAwB;AACtBP,YAAQoB,SAAR,CAAkB,CAAlB,EAAqB,CAArB,EAAwBnB,OAAxB,EAAiCC,OAAjC;AACD;;AAED;;;AAGA,WAASM,WAAT,CAAqBf,SAArB,EAAgC;AAC9BO,YAAQqB,SAAR,GAAoB5B,UAAUC,eAA9B;AACAM,YAAQsB,QAAR,CAAiB,CAAjB,EAAoB,CAApB,EAAuBrB,OAAvB,EAAgCC,OAAhC;AACA;AACA,QAAIC,KAAKU,SAAT,EAAoB;AAClBb,cAAQqB,SAAR,GAAoBlB,KAAKU,SAAzB;AACAb,cAAQuB,WAAR,GAAsB9B,UAAUG,sBAAhC;AACAI,cAAQsB,QAAR,CAAiB,CAAjB,EAAoB,CAApB,EAAuBrB,OAAvB,EAAgCC,OAAhC;AACAF,cAAQuB,WAAR,GAAsB,CAAtB;AACD;AACF;AAEF;AACDC,OAAOC,OAAP,GAAiB;AACf1B,UAAQA;AADO,CAAjB","file":"_render.js","sourcesContent":["let defaultOpt = {\n  bgOptions: {\n    backgroundColor: '#ffffff',                   //说明: 支持fillstyle所有原生写法, 例: rgba(255,255,255,1),默认#ffffff\n    backgroundImage: null, \t\t                    //说明: 背景网格线, 默认为null\n    backgourndImageOpacity: 0.3,                  //说明: 背景网格线透明度, 配置了backgroundImage此字段才有效, 默认0.3\n                                                  //备注: backgroundColor灰,白,0.5美观;backgroundColor黑色,蓝色,0.2美观\n    tooltipBackgroundColor: 'rgba(0, 0, 0, 0.7)', //说明: 悬停提示的背景色样式,默认rgba(0, 0, 0, 0.7)\n    tooltipColor: 'rgb(255, 255, 255)'            //说明: 悬停提示的文字样式,默认rgb(255, 255, 255)\n  }\n};\n\n/**\n * 渲染\n *  使用方式：\n *  var render = new Render(context, canvasW, canvasH, bgOptions);\n *  render.itemLoaded( _aot.option.bgOptions,function(){\n *\t\trender.draw();\n *\t});\n * @param {any} context\n * @param {any} canvasW\n * @param {any} canvasH\n * @param {any} bgOptions\n */\nfunction Render(context, canvasW, canvasH, bgOptions) {\n  var self = this;\n  let _opts = bgOptions || defaultOpt.bgOptions;\n  this.draw = function(callback) {\n    _clearCanvas(); //清除图像\n    _drawGlobal(_opts); //绘制背景\n  };\n\n  /**\n   *\t初始加载图片(私有方法)\n   */\n  this.itemLoaded = function(bgOptions, callback) {\n    if (bgOptions.backgroundImage) {\n      try {\n        //appState = STATE_IMAGE_LOAD;\n        self.bgImg = new Image();\n        self.bgImg.addEventListener('load', function() {\n          //初始背景图片渐变\n          self.bgPattern = context.createPattern(self.bgImg, 'repeat');\n          callback();\n        }, false);\n        self.bgImg.src = bgOptions.backgroundImage;\n      } catch (e) {\n        callback();\n        throw new Error('ctopo backgroundImage load error');\n      } finally {\n        console.log('finally execute');\n      }\n    } else {\n      callback();\n    }\n  };\n\n  /**\n   *私有方法\n   */\n  function _clearCanvas() {\n    context.clearRect(0, 0, canvasW, canvasH);\n  }\n\n  /**\n   *私有方法\n   */\n  function _drawGlobal(bgOptions) {\n    context.fillStyle = bgOptions.backgroundColor;\n    context.fillRect(0, 0, canvasW, canvasH);\n    //绘制背景网格\n    if (self.bgPattern) {\n      context.fillStyle = self.bgPattern;\n      context.globalAlpha = bgOptions.backgourndImageOpacity;\n      context.fillRect(0, 0, canvasW, canvasH);\n      context.globalAlpha = 1;\n    }\n  }\n\n}\nmodule.exports = {\n  Render: Render\n};\n"]}